// GO SOURCE FILE MACHINE GENERATED BY RAGEL; DO NOT EDIT

// Copyright 2014 The Cayley Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package turtle

import (
	"fmt"
	"unicode"
)

%%{
	machine turtle;

	action Escape {
        isEscaped = true
    }

    action Start {
        start = p
    }

    action SEnd {
        send = p
    }

    action Spec {
        spec = p
    }

    action ESpec {
        espec = p
    }

    action Lang {
        espec = p
        isLang = true
    }

    action BReturn {
        return BlankNode(data[start+2:p]), nil
    }

    action IReturn {
        return IRI(data[start+1:p-1]), nil
    }

    action SReturn {
        if !isEscaped {
            return String(data[start+1:p-1]), nil
        }
        return String(unEscape(data[start+1:p-1])), nil
    }

    action Return {
        var val String
        if isEscaped {
            val = String(unEscape(data[start+1:send-1]))
        } else {
            val = String(data[start+1:send-1])
        }
        if spec < 0 {
            return val, nil
        } else if isLang {
            return LangString{Value:val, Lang:string(data[spec+1:espec])}, nil
        } else {
            return TypedString{Value:val, Type:IRI(data[spec+1:espec-1])}, nil
        }
    }

    action Error {
        if p < len(data) {
            if r := data[p]; r < unicode.MaxASCII {
                return nil, fmt.Errorf("%v: unexpected rune %q at %d", ErrInvalid, data[p], p)
            } else {
                return nil, fmt.Errorf("%v: unexpected rune %q (\\u%04x) at %d", ErrInvalid, data[p], data[p], p)
            }
        }
        return nil, ErrInvalid
    }

	include "turtle.rl";

	write data;
}%%

// Parse returns a valid Term or a non-nil error.
func Parse(s string) (Term, error) {
	data := []rune(s)

	var (
		cs, p int
		pe    = len(data)
		eof   = pe

		start = -1
		spec = -1
		espec = -1
		send = -1

		isEscaped bool
		isLang bool
	)

	%%write init;

	%%write exec;

	return nil, ErrInvalid
}
