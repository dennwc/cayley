// line 1 "parse.rl"
// GO SOURCE FILE MACHINE GENERATED BY RAGEL; DO NOT EDIT

// Copyright 2014 The Cayley Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package turtle

import (
	"fmt"
	"unicode"
)

// line 28 "parse.go"
const turtle_start int = 1
const turtle_first_final int = 42
const turtle_error int = 0

const turtle_en_statement int = 1

// line 97 "parse.rl"

// Parse returns a valid Term or a non-nil error.
func Parse(s string) (Term, error) {
	data := []rune(s)

	var (
		cs, p int
		pe    = len(data)
		eof   = pe

		start = -1
		spec  = -1
		espec = -1
		send  = -1

		isEscaped bool
		isLang    bool
	)

	// line 58 "parse.go"
	{
		cs = turtle_start
	}

	// line 118 "parse.rl"

	// line 66 "parse.go"
	{
		if p == pe {
			goto _test_eof
		}
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 42:
			goto st_case_42
		case 3:
			goto st_case_3
		case 43:
			goto st_case_43
		case 4:
			goto st_case_4
		case 44:
			goto st_case_44
		case 5:
			goto st_case_5
		case 6:
			goto st_case_6
		case 7:
			goto st_case_7
		case 45:
			goto st_case_45
		case 8:
			goto st_case_8
		case 9:
			goto st_case_9
		case 10:
			goto st_case_10
		case 11:
			goto st_case_11
		case 12:
			goto st_case_12
		case 13:
			goto st_case_13
		case 14:
			goto st_case_14
		case 15:
			goto st_case_15
		case 16:
			goto st_case_16
		case 17:
			goto st_case_17
		case 18:
			goto st_case_18
		case 19:
			goto st_case_19
		case 20:
			goto st_case_20
		case 21:
			goto st_case_21
		case 22:
			goto st_case_22
		case 23:
			goto st_case_23
		case 24:
			goto st_case_24
		case 25:
			goto st_case_25
		case 26:
			goto st_case_26
		case 27:
			goto st_case_27
		case 28:
			goto st_case_28
		case 46:
			goto st_case_46
		case 29:
			goto st_case_29
		case 30:
			goto st_case_30
		case 31:
			goto st_case_31
		case 32:
			goto st_case_32
		case 33:
			goto st_case_33
		case 34:
			goto st_case_34
		case 35:
			goto st_case_35
		case 36:
			goto st_case_36
		case 37:
			goto st_case_37
		case 38:
			goto st_case_38
		case 39:
			goto st_case_39
		case 40:
			goto st_case_40
		case 47:
			goto st_case_47
		case 41:
			goto st_case_41
		}
		goto st_out
	st_case_1:
		switch data[p] {
		case 34:
			goto tr1
		case 60:
			goto tr2
		case 95:
			goto tr3
		}
		goto tr0
	tr0:
		// line 83 "parse.rl"

		if p < len(data) {
			if r := data[p]; r < unicode.MaxASCII {
				return nil, fmt.Errorf("%v: unexpected rune %q at %d", ErrInvalid, data[p], p)
			} else {
				return nil, fmt.Errorf("%v: unexpected rune %q (\\u%04x) at %d", ErrInvalid, data[p], data[p], p)
			}
		}
		return nil, ErrInvalid

		goto st0
		// line 194 "parse.go"
	st_case_0:
	st0:
		cs = 0
		goto _out
	tr1:
		// line 31 "parse.rl"

		start = p

		goto st2
	tr29:
		// line 27 "parse.rl"

		isEscaped = true

		goto st2
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
		// line 218 "parse.go"
		switch data[p] {
		case 34:
			goto st42
		case 92:
			goto st18
		}
		switch {
		case data[p] < 11:
			if 0 <= data[p] && data[p] <= 9 {
				goto st2
			}
		case data[p] > 12:
			if 14 <= data[p] && data[p] <= 1114111 {
				goto st2
			}
		default:
			goto st2
		}
		goto tr0
	tr30:
		// line 27 "parse.rl"

		isEscaped = true

		goto st42
	st42:
		if p++; p == pe {
			goto _test_eof42
		}
	st_case_42:
		// line 250 "parse.go"
		switch data[p] {
		case 64:
			goto tr56
		case 94:
			goto tr58
		}
		goto st0
	tr56:
		// line 35 "parse.rl"

		send = p

		// line 39 "parse.rl"

		spec = p

		goto st3
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
		// line 275 "parse.go"
		switch {
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto st43
			}
		case data[p] >= 65:
			goto st43
		}
		goto tr0
	st43:
		if p++; p == pe {
			goto _test_eof43
		}
	st_case_43:
		if data[p] == 45 {
			goto st4
		}
		switch {
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto st43
			}
		case data[p] >= 65:
			goto st43
		}
		goto st0
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st44
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto st44
			}
		default:
			goto st44
		}
		goto tr0
	st44:
		if p++; p == pe {
			goto _test_eof44
		}
	st_case_44:
		if data[p] == 45 {
			goto st4
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st44
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto st44
			}
		default:
			goto st44
		}
		goto st0
	tr58:
		// line 35 "parse.rl"

		send = p

		goto st5
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
		// line 353 "parse.go"
		if data[p] == 94 {
			goto st6
		}
		goto tr0
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
		if data[p] == 60 {
			goto tr10
		}
		goto tr0
	tr10:
		// line 39 "parse.rl"

		spec = p

		goto st7
	tr23:
		// line 27 "parse.rl"

		isEscaped = true

		goto st7
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
		// line 386 "parse.go"
		switch data[p] {
		case 33:
			goto st7
		case 62:
			goto st45
		case 92:
			goto st8
		case 95:
			goto st7
		case 126:
			goto st7
		}
		switch {
		case data[p] < 61:
			if 35 <= data[p] && data[p] <= 59 {
				goto st7
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto st7
				}
			case data[p] >= 97:
				goto st7
			}
		default:
			goto st7
		}
		goto tr0
	tr24:
		// line 27 "parse.rl"

		isEscaped = true

		goto st45
	st45:
		if p++; p == pe {
			goto _test_eof45
		}
	st_case_45:
		// line 429 "parse.go"
		goto st0
	tr25:
		// line 27 "parse.rl"

		isEscaped = true

		goto st8
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
		// line 443 "parse.go"
		switch data[p] {
		case 85:
			goto st9
		case 117:
			goto st13
		}
		goto tr0
	st9:
		if p++; p == pe {
			goto _test_eof9
		}
	st_case_9:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st10
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st10
			}
		default:
			goto st10
		}
		goto tr0
	st10:
		if p++; p == pe {
			goto _test_eof10
		}
	st_case_10:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st11
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st11
			}
		default:
			goto st11
		}
		goto tr0
	st11:
		if p++; p == pe {
			goto _test_eof11
		}
	st_case_11:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st12
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st12
			}
		default:
			goto st12
		}
		goto tr0
	st12:
		if p++; p == pe {
			goto _test_eof12
		}
	st_case_12:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st13
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st13
			}
		default:
			goto st13
		}
		goto tr0
	st13:
		if p++; p == pe {
			goto _test_eof13
		}
	st_case_13:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st14
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st14
			}
		default:
			goto st14
		}
		goto tr0
	st14:
		if p++; p == pe {
			goto _test_eof14
		}
	st_case_14:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st15
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st15
			}
		default:
			goto st15
		}
		goto tr0
	st15:
		if p++; p == pe {
			goto _test_eof15
		}
	st_case_15:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st16
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st16
			}
		default:
			goto st16
		}
		goto tr0
	st16:
		if p++; p == pe {
			goto _test_eof16
		}
	st_case_16:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st17
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st17
			}
		default:
			goto st17
		}
		goto tr0
	st17:
		if p++; p == pe {
			goto _test_eof17
		}
	st_case_17:
		switch data[p] {
		case 33:
			goto tr23
		case 62:
			goto tr24
		case 92:
			goto tr25
		case 95:
			goto tr23
		case 126:
			goto tr23
		}
		switch {
		case data[p] < 61:
			if 35 <= data[p] && data[p] <= 59 {
				goto tr23
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto tr23
				}
			case data[p] >= 97:
				goto tr23
			}
		default:
			goto tr23
		}
		goto tr0
	tr31:
		// line 27 "parse.rl"

		isEscaped = true

		goto st18
	st18:
		if p++; p == pe {
			goto _test_eof18
		}
	st_case_18:
		// line 642 "parse.go"
		switch data[p] {
		case 34:
			goto st19
		case 39:
			goto st19
		case 85:
			goto st20
		case 92:
			goto st19
		case 98:
			goto st19
		case 102:
			goto st19
		case 110:
			goto st19
		case 114:
			goto st19
		case 116:
			goto st19
		case 117:
			goto st24
		}
		goto tr0
	st19:
		if p++; p == pe {
			goto _test_eof19
		}
	st_case_19:
		switch data[p] {
		case 34:
			goto tr30
		case 92:
			goto tr31
		}
		switch {
		case data[p] < 11:
			if 0 <= data[p] && data[p] <= 9 {
				goto tr29
			}
		case data[p] > 12:
			if 14 <= data[p] && data[p] <= 1114111 {
				goto tr29
			}
		default:
			goto tr29
		}
		goto tr0
	st20:
		if p++; p == pe {
			goto _test_eof20
		}
	st_case_20:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st21
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st21
			}
		default:
			goto st21
		}
		goto tr0
	st21:
		if p++; p == pe {
			goto _test_eof21
		}
	st_case_21:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st22
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st22
			}
		default:
			goto st22
		}
		goto tr0
	st22:
		if p++; p == pe {
			goto _test_eof22
		}
	st_case_22:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st23
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st23
			}
		default:
			goto st23
		}
		goto tr0
	st23:
		if p++; p == pe {
			goto _test_eof23
		}
	st_case_23:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st24
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st24
			}
		default:
			goto st24
		}
		goto tr0
	st24:
		if p++; p == pe {
			goto _test_eof24
		}
	st_case_24:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st25
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st25
			}
		default:
			goto st25
		}
		goto tr0
	st25:
		if p++; p == pe {
			goto _test_eof25
		}
	st_case_25:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st26
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st26
			}
		default:
			goto st26
		}
		goto tr0
	st26:
		if p++; p == pe {
			goto _test_eof26
		}
	st_case_26:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st27
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st27
			}
		default:
			goto st27
		}
		goto tr0
	st27:
		if p++; p == pe {
			goto _test_eof27
		}
	st_case_27:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st19
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st19
			}
		default:
			goto st19
		}
		goto tr0
	tr2:
		// line 31 "parse.rl"

		start = p

		goto st28
	tr50:
		// line 27 "parse.rl"

		isEscaped = true

		goto st28
	st28:
		if p++; p == pe {
			goto _test_eof28
		}
	st_case_28:
		// line 853 "parse.go"
		switch data[p] {
		case 33:
			goto st28
		case 62:
			goto st46
		case 92:
			goto st29
		case 95:
			goto st28
		case 126:
			goto st28
		}
		switch {
		case data[p] < 61:
			if 35 <= data[p] && data[p] <= 59 {
				goto st28
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto st28
				}
			case data[p] >= 97:
				goto st28
			}
		default:
			goto st28
		}
		goto tr0
	tr51:
		// line 27 "parse.rl"

		isEscaped = true

		goto st46
	st46:
		if p++; p == pe {
			goto _test_eof46
		}
	st_case_46:
		// line 896 "parse.go"
		goto st0
	tr52:
		// line 27 "parse.rl"

		isEscaped = true

		goto st29
	st29:
		if p++; p == pe {
			goto _test_eof29
		}
	st_case_29:
		// line 910 "parse.go"
		switch data[p] {
		case 85:
			goto st30
		case 117:
			goto st34
		}
		goto tr0
	st30:
		if p++; p == pe {
			goto _test_eof30
		}
	st_case_30:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st31
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st31
			}
		default:
			goto st31
		}
		goto tr0
	st31:
		if p++; p == pe {
			goto _test_eof31
		}
	st_case_31:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st32
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st32
			}
		default:
			goto st32
		}
		goto tr0
	st32:
		if p++; p == pe {
			goto _test_eof32
		}
	st_case_32:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st33
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st33
			}
		default:
			goto st33
		}
		goto tr0
	st33:
		if p++; p == pe {
			goto _test_eof33
		}
	st_case_33:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st34
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st34
			}
		default:
			goto st34
		}
		goto tr0
	st34:
		if p++; p == pe {
			goto _test_eof34
		}
	st_case_34:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st35
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st35
			}
		default:
			goto st35
		}
		goto tr0
	st35:
		if p++; p == pe {
			goto _test_eof35
		}
	st_case_35:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st36
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st36
			}
		default:
			goto st36
		}
		goto tr0
	st36:
		if p++; p == pe {
			goto _test_eof36
		}
	st_case_36:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st37
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st37
			}
		default:
			goto st37
		}
		goto tr0
	st37:
		if p++; p == pe {
			goto _test_eof37
		}
	st_case_37:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st38
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st38
			}
		default:
			goto st38
		}
		goto tr0
	st38:
		if p++; p == pe {
			goto _test_eof38
		}
	st_case_38:
		switch data[p] {
		case 33:
			goto tr50
		case 62:
			goto tr51
		case 92:
			goto tr52
		case 95:
			goto tr50
		case 126:
			goto tr50
		}
		switch {
		case data[p] < 61:
			if 35 <= data[p] && data[p] <= 59 {
				goto tr50
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto tr50
				}
			case data[p] >= 97:
				goto tr50
			}
		default:
			goto tr50
		}
		goto tr0
	tr3:
		// line 31 "parse.rl"

		start = p

		goto st39
	st39:
		if p++; p == pe {
			goto _test_eof39
		}
	st_case_39:
		// line 1109 "parse.go"
		if data[p] == 58 {
			goto st40
		}
		goto tr0
	st40:
		if p++; p == pe {
			goto _test_eof40
		}
	st_case_40:
		if data[p] == 95 {
			goto st47
		}
		switch {
		case data[p] < 895:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st47
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st47
					}
				default:
					goto st47
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st47
					}
				case data[p] > 767:
					if 880 <= data[p] && data[p] <= 893 {
						goto st47
					}
				default:
					goto st47
				}
			default:
				goto st47
			}
		case data[p] > 8191:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8204 <= data[p] && data[p] <= 8205 {
						goto st47
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st47
					}
				default:
					goto st47
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st47
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st47
					}
				default:
					goto st47
				}
			default:
				goto st47
			}
		default:
			goto st47
		}
		goto tr0
	st47:
		if p++; p == pe {
			goto _test_eof47
		}
	st_case_47:
		switch data[p] {
		case 45:
			goto st47
		case 46:
			goto st41
		case 95:
			goto st47
		case 183:
			goto st47
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st47
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st47
					}
				default:
					goto st47
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st47
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st47
					}
				default:
					goto st47
				}
			default:
				goto st47
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st47
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st47
					}
				default:
					goto st47
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st47
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st47
					}
				default:
					goto st47
				}
			default:
				goto st47
			}
		default:
			goto st47
		}
		goto st0
	st41:
		if p++; p == pe {
			goto _test_eof41
		}
	st_case_41:
		switch data[p] {
		case 45:
			goto st47
		case 46:
			goto st41
		case 95:
			goto st47
		case 183:
			goto st47
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st47
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st47
					}
				default:
					goto st47
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st47
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st47
					}
				default:
					goto st47
				}
			default:
				goto st47
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st47
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st47
					}
				default:
					goto st47
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st47
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st47
					}
				default:
					goto st47
				}
			default:
				goto st47
			}
		default:
			goto st47
		}
		goto tr0
	st_out:
	_test_eof2:
		cs = 2
		goto _test_eof
	_test_eof42:
		cs = 42
		goto _test_eof
	_test_eof3:
		cs = 3
		goto _test_eof
	_test_eof43:
		cs = 43
		goto _test_eof
	_test_eof4:
		cs = 4
		goto _test_eof
	_test_eof44:
		cs = 44
		goto _test_eof
	_test_eof5:
		cs = 5
		goto _test_eof
	_test_eof6:
		cs = 6
		goto _test_eof
	_test_eof7:
		cs = 7
		goto _test_eof
	_test_eof45:
		cs = 45
		goto _test_eof
	_test_eof8:
		cs = 8
		goto _test_eof
	_test_eof9:
		cs = 9
		goto _test_eof
	_test_eof10:
		cs = 10
		goto _test_eof
	_test_eof11:
		cs = 11
		goto _test_eof
	_test_eof12:
		cs = 12
		goto _test_eof
	_test_eof13:
		cs = 13
		goto _test_eof
	_test_eof14:
		cs = 14
		goto _test_eof
	_test_eof15:
		cs = 15
		goto _test_eof
	_test_eof16:
		cs = 16
		goto _test_eof
	_test_eof17:
		cs = 17
		goto _test_eof
	_test_eof18:
		cs = 18
		goto _test_eof
	_test_eof19:
		cs = 19
		goto _test_eof
	_test_eof20:
		cs = 20
		goto _test_eof
	_test_eof21:
		cs = 21
		goto _test_eof
	_test_eof22:
		cs = 22
		goto _test_eof
	_test_eof23:
		cs = 23
		goto _test_eof
	_test_eof24:
		cs = 24
		goto _test_eof
	_test_eof25:
		cs = 25
		goto _test_eof
	_test_eof26:
		cs = 26
		goto _test_eof
	_test_eof27:
		cs = 27
		goto _test_eof
	_test_eof28:
		cs = 28
		goto _test_eof
	_test_eof46:
		cs = 46
		goto _test_eof
	_test_eof29:
		cs = 29
		goto _test_eof
	_test_eof30:
		cs = 30
		goto _test_eof
	_test_eof31:
		cs = 31
		goto _test_eof
	_test_eof32:
		cs = 32
		goto _test_eof
	_test_eof33:
		cs = 33
		goto _test_eof
	_test_eof34:
		cs = 34
		goto _test_eof
	_test_eof35:
		cs = 35
		goto _test_eof
	_test_eof36:
		cs = 36
		goto _test_eof
	_test_eof37:
		cs = 37
		goto _test_eof
	_test_eof38:
		cs = 38
		goto _test_eof
	_test_eof39:
		cs = 39
		goto _test_eof
	_test_eof40:
		cs = 40
		goto _test_eof
	_test_eof47:
		cs = 47
		goto _test_eof
	_test_eof41:
		cs = 41
		goto _test_eof

	_test_eof:
		{
		}
		if p == eof {
			switch cs {
			case 47:
				// line 52 "parse.rl"

				return BlankNode(data[start+2 : p]), nil

			case 46:
				// line 56 "parse.rl"

				return IRI(data[start+1 : p-1]), nil

			case 42:
				// line 60 "parse.rl"

				if !isEscaped {
					return String(data[start+1 : p-1]), nil
				}
				return String(unEscape(data[start+1 : p-1])), nil

			case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41:
				// line 83 "parse.rl"

				if p < len(data) {
					if r := data[p]; r < unicode.MaxASCII {
						return nil, fmt.Errorf("%v: unexpected rune %q at %d", ErrInvalid, data[p], p)
					} else {
						return nil, fmt.Errorf("%v: unexpected rune %q (\\u%04x) at %d", ErrInvalid, data[p], data[p], p)
					}
				}
				return nil, ErrInvalid

			case 45:
				// line 43 "parse.rl"

				espec = p

				// line 67 "parse.rl"

				var val String
				if isEscaped {
					val = String(unEscape(data[start+1 : send-1]))
				} else {
					val = String(data[start+1 : send-1])
				}
				if spec < 0 {
					return val, nil
				} else if isLang {
					return LangString{Value: val, Lang: string(data[spec+1 : espec])}, nil
				} else {
					return TypedString{Value: val, Type: IRI(data[spec+1 : espec-1])}, nil
				}

			case 43, 44:
				// line 47 "parse.rl"

				espec = p
				isLang = true

				// line 67 "parse.rl"

				var val String
				if isEscaped {
					val = String(unEscape(data[start+1 : send-1]))
				} else {
					val = String(data[start+1 : send-1])
				}
				if spec < 0 {
					return val, nil
				} else if isLang {
					return LangString{Value: val, Lang: string(data[spec+1 : espec])}, nil
				} else {
					return TypedString{Value: val, Type: IRI(data[spec+1 : espec-1])}, nil
				}

				// line 1485 "parse.go"
			}
		}

	_out:
		{
		}
	}

	// line 120 "parse.rl"

	return nil, ErrInvalid
}
